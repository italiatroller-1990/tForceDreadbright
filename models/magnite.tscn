[gd_scene load_steps=10 format=3 uid="uid://7qpj8k5oemy7"]

[ext_resource type="PackedScene" uid="uid://d85q6csowtup" path="res://models/magnite.blend" id="1_eo3eq"]
[ext_resource type="Texture2D" uid="uid://5bhxibp2fpy3" path="res://models/magnite_Material Base Color.png" id="2_60jgp"]
[ext_resource type="Texture2D" uid="uid://ck1uvteiwdi2e" path="res://models/magnite_Material.png" id="3_47atn"]

[sub_resource type="Shader" id="Shader_60jgp"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

uniform float viewmodel_fov = 75.0f;

uniform vec4 albedo : source_color = vec4(1.0f);
uniform sampler2D texture_albedo : source_color;
uniform float specular = 0.5f;
uniform float metallic = 1.0f;
uniform float roughness : hint_range(0,1) = 1.0f;
uniform sampler2D texture_metallic : hint_default_white;
uniform vec4 metallic_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
uniform sampler2D texture_roughness : hint_default_white;
uniform vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16) = 0.5f;
uniform vec3 uv1_scale = vec3(1.0f);
uniform vec3 uv1_offset = vec3(0.0f);

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	/* begin shader magic*/
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
}

void fragment() {
	DEPTH = FRAGCOORD.z * 2.99;
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	
	NORMAL_MAP_DEPTH = normal_scale;

}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_47atn"]
render_priority = 0
shader = SubResource("Shader_60jgp")
shader_parameter/viewmodel_fov = 90.0
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = ExtResource("2_60jgp")
shader_parameter/specular = 0.1
shader_parameter/metallic = 1.0
shader_parameter/roughness = 0.3
shader_parameter/texture_metallic = ExtResource("2_60jgp")
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_roughness = ExtResource("2_60jgp")
shader_parameter/roughness_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/normal_scale = 0.5
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)

[sub_resource type="Shader" id="Shader_h4b5w"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

uniform float viewmodel_fov = 75.0f;

uniform vec4 albedo : source_color = vec4(1.0f);
uniform sampler2D texture_albedo : source_color;
uniform float specular = 0.5f;
uniform float metallic = 1.0f;
uniform float roughness : hint_range(0,1) = 1.0f;
uniform sampler2D texture_metallic : hint_default_white;
uniform vec4 metallic_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
uniform sampler2D texture_roughness : hint_default_white;
uniform vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16) = 0.5f;
uniform vec3 uv1_scale = vec3(1.0f);
uniform vec3 uv1_offset = vec3(0.0f);

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	/* begin shader magic*/
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
}

void fragment() {
	DEPTH = FRAGCOORD.z * 2.99;
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;

	NORMAL_MAP_DEPTH = normal_scale;

}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_kcs6v"]
render_priority = 0
shader = SubResource("Shader_h4b5w")
shader_parameter/viewmodel_fov = 75.0
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = ExtResource("3_47atn")
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.63
shader_parameter/roughness = 0.29
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/roughness_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/normal_scale = 0.5
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)

[sub_resource type="Shader" id="Shader_oxg2w"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

uniform float viewmodel_fov = 75.0f;

uniform vec4 albedo : source_color = vec4(1.0f);
uniform sampler2D texture_albedo : source_color;
uniform float specular = 0.5f;
uniform float metallic = 1.0f;
uniform float roughness : hint_range(0,1) = 1.0f;
uniform sampler2D texture_metallic : hint_default_white;
uniform vec4 metallic_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
uniform sampler2D texture_roughness : hint_default_white;
uniform vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16) = 0.5f;
uniform vec3 uv1_scale = vec3(1.0f);
uniform vec3 uv1_offset = vec3(0.0f);

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	/* begin shader magic*/
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
}

void fragment() {
	DEPTH = FRAGCOORD.z * 2.99;
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	
	NORMAL_MAP_DEPTH = normal_scale;

}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_b238c"]
render_priority = 0
shader = SubResource("Shader_oxg2w")
shader_parameter/viewmodel_fov = 75.0
shader_parameter/albedo = Color(0.716738, 0.477636, 0, 1)
shader_parameter/specular = 1.0
shader_parameter/metallic = 0.0
shader_parameter/roughness = 0.55
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/roughness_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/normal_scale = 0.5
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)

[node name="magnite" instance=ExtResource("1_eo3eq")]

[node name="Cube" parent="." index="0"]
surface_material_override/0 = SubResource("ShaderMaterial_47atn")

[node name="Cylinder" parent="." index="1"]
surface_material_override/0 = SubResource("ShaderMaterial_kcs6v")

[node name="Cube_001" parent="." index="2"]
surface_material_override/0 = SubResource("ShaderMaterial_b238c")
